<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Socket.IO Device ID Connection</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
        <div class="card shadow p-4" style="width: 100%; max-width: 400px;">
            <h1 class="card-title text-center mb-4">Connect with Device ID</h1>
            <form id="deviceForm" class="form mb-3">
                <div class="form-group">
                    <input type="text" id="deviceIdInput" class="form-control" placeholder="Enter Device ID" required>
                </div>
                <button type="submit" class="btn btn-primary btn-block">Connect</button>
            </form>

            <div id="status" class="alert alert-info text-center" style="display: none;"></div>

            <div id="chatContainer" class="mt-4" style="display: none;">
                <div id="messages" class="border rounded p-3 mb-3" style="height: 200px; overflow-y: auto;"></div>
                <form id="messageForm" class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type a message" required>
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-primary">Send</button>
                    </div>
                </form>
            </div>

            <button id="skipButton" class="btn btn-secondary btn-block mt-3" style="display: none;">Skip</button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let currentRoom;
        let deviceId = '';

        // Handle device ID form submission
        document.getElementById('deviceForm').addEventListener('submit', function(e) {
            e.preventDefault();
            deviceId = document.getElementById('deviceIdInput').value;
            console.log('Registering or joining with deviceId:', deviceId);
            socket.emit('registerorjoin', deviceId);
        });

        // Handle successful room joining
        socket.on('joined', function(room) {
            currentRoom = room;
            console.log('Joined room:', room);
            document.getElementById('status').innerText = `Joined room: ${room}`;
            document.getElementById('status').style.display = 'block';
            document.getElementById('chatContainer').style.display = 'block';
            document.getElementById('skipButton').style.display = 'block';
        });

        // Handle message form submission
        document.getElementById('messageForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const message = document.getElementById('messageInput').value;
            console.log('Sending message:', message, 'to room:', currentRoom);
            socket.emit('message', { message, deviceId, room: currentRoom });
            document.getElementById('messageInput').value = '';
        });

        // Display received messages
        socket.on('message', function(data) {
            console.log('Received message:', data);
            const { message, deviceId: senderDeviceId } = data;
            const messageElement = document.createElement('div');
            const senderName = senderDeviceId === deviceId ? 'You' : senderDeviceId;
            
            messageElement.innerHTML = `<strong>${senderName}:</strong> ${message}`;
            messageElement.classList.add('p-2', 'mb-2', 'rounded', 'text-white');

            // Apply different styles based on the sender
            if (senderDeviceId === deviceId) {
                messageElement.classList.add('bg-primary', 'text-right');
            } else {
                messageElement.classList.add('bg-secondary', 'text-left');
            }

            document.getElementById('messages').appendChild(messageElement);
            document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight; // Auto-scroll to the latest message
        });

        // Display searching status
        socket.on('searching', function() {
            console.log('Searching for a user to pair...');
            document.getElementById('status').innerText = 'Searching for a user to pair...';
            document.getElementById('status').style.display = 'block';
        });

        // Update status and display chat container when paired
        socket.on('roomReady', function(room) {
            currentRoom = room;
            socket.emit('joinRoom', room);
        });

        // Clear chat messages
        socket.on('clearChat', function() {
            console.log('Clearing chat');
            document.getElementById('messages').innerHTML = '';
        });

        // Show rejoin status
        socket.on('reJoin', function(room) {
            socket.emit('reJoin', deviceId, currentRoom);
            document.getElementById('status').innerText = 'Rejoining...';
        });

        // Handle connection denial
        socket.on('connectionDenied', function(data) {
            console.log('Connection denied:', data);
            document.getElementById('status').innerText = `Connection denied: ${data.message}`;
            document.getElementById('status').classList.replace('alert-info', 'alert-danger');
            document.getElementById('status').style.display = 'block';
        });

        // Handle user disconnection
        socket.on('userDisconnected', function(data) {
            console.log('User disconnected:', data);
            document.getElementById('status').innerText = data.message;
            document.getElementById('status').classList.replace('alert-info', 'alert-warning');
            document.getElementById('status').style.display = 'block';
        });

        // Skip button functionality
        document.getElementById('skipButton').addEventListener('click', function() {
            if (currentRoom) {
                console.log('Skipping room:', currentRoom);
                socket.emit('skip', currentRoom);
                document.getElementById('status').innerText = 'Skipping to a new user...';
                document.getElementById('status').classList.replace('alert-info', 'alert-secondary');
            }
        });

        // Handle page unload
        window.addEventListener('beforeunload', function(e) {
                console.log('Disconnecting room:', currentRoom);
                socket.emit('disconnectRoom', currentRoom);
        });
    </script>
</body>
</html>
